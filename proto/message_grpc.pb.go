// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: message.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MessageService_RoomList_FullMethodName          = "/proto.MessageService/RoomList"
	MessageService_RoomCreatePerson_FullMethodName  = "/proto.MessageService/RoomCreatePerson"
	MessageService_RoomCreateGroup_FullMethodName   = "/proto.MessageService/RoomCreateGroup"
	MessageService_RoomDelete_FullMethodName        = "/proto.MessageService/RoomDelete"
	MessageService_ListMessageByRoom_FullMethodName = "/proto.MessageService/ListMessageByRoom"
	MessageService_SetMessage_FullMethodName        = "/proto.MessageService/SetMessage"
	MessageService_SetMessageAi_FullMethodName      = "/proto.MessageService/SetMessageAi"
	MessageService_GetMessageAi_FullMethodName      = "/proto.MessageService/GetMessageAi"
)

// MessageServiceClient is the client API for MessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageServiceClient interface {
	RoomList(ctx context.Context, in *RoomListRequest, opts ...grpc.CallOption) (*RoomListResponse, error)
	RoomCreatePerson(ctx context.Context, in *RoomCreatePersonRequest, opts ...grpc.CallOption) (*RoomCreateResponse, error)
	RoomCreateGroup(ctx context.Context, in *RoomCreateGroupRequest, opts ...grpc.CallOption) (*RoomCreateResponse, error)
	RoomDelete(ctx context.Context, in *RoomDeleteRequest, opts ...grpc.CallOption) (*RoomDeleteResponse, error)
	ListMessageByRoom(ctx context.Context, in *ListMessageByRoomRequest, opts ...grpc.CallOption) (*GetListMessageByRoomResponse, error)
	SetMessage(ctx context.Context, in *SetMessageRequest, opts ...grpc.CallOption) (*SetMessageResponse, error)
	SetMessageAi(ctx context.Context, in *SetMessageAiRequest, opts ...grpc.CallOption) (*SetMessageAiResponse, error)
	GetMessageAi(ctx context.Context, in *GetMessageAiRequest, opts ...grpc.CallOption) (*GetMessageAiResponse, error)
}

type messageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageServiceClient(cc grpc.ClientConnInterface) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) RoomList(ctx context.Context, in *RoomListRequest, opts ...grpc.CallOption) (*RoomListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoomListResponse)
	err := c.cc.Invoke(ctx, MessageService_RoomList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) RoomCreatePerson(ctx context.Context, in *RoomCreatePersonRequest, opts ...grpc.CallOption) (*RoomCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoomCreateResponse)
	err := c.cc.Invoke(ctx, MessageService_RoomCreatePerson_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) RoomCreateGroup(ctx context.Context, in *RoomCreateGroupRequest, opts ...grpc.CallOption) (*RoomCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoomCreateResponse)
	err := c.cc.Invoke(ctx, MessageService_RoomCreateGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) RoomDelete(ctx context.Context, in *RoomDeleteRequest, opts ...grpc.CallOption) (*RoomDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoomDeleteResponse)
	err := c.cc.Invoke(ctx, MessageService_RoomDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) ListMessageByRoom(ctx context.Context, in *ListMessageByRoomRequest, opts ...grpc.CallOption) (*GetListMessageByRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetListMessageByRoomResponse)
	err := c.cc.Invoke(ctx, MessageService_ListMessageByRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) SetMessage(ctx context.Context, in *SetMessageRequest, opts ...grpc.CallOption) (*SetMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetMessageResponse)
	err := c.cc.Invoke(ctx, MessageService_SetMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) SetMessageAi(ctx context.Context, in *SetMessageAiRequest, opts ...grpc.CallOption) (*SetMessageAiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetMessageAiResponse)
	err := c.cc.Invoke(ctx, MessageService_SetMessageAi_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) GetMessageAi(ctx context.Context, in *GetMessageAiRequest, opts ...grpc.CallOption) (*GetMessageAiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMessageAiResponse)
	err := c.cc.Invoke(ctx, MessageService_GetMessageAi_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageServiceServer is the server API for MessageService service.
// All implementations must embed UnimplementedMessageServiceServer
// for forward compatibility.
type MessageServiceServer interface {
	RoomList(context.Context, *RoomListRequest) (*RoomListResponse, error)
	RoomCreatePerson(context.Context, *RoomCreatePersonRequest) (*RoomCreateResponse, error)
	RoomCreateGroup(context.Context, *RoomCreateGroupRequest) (*RoomCreateResponse, error)
	RoomDelete(context.Context, *RoomDeleteRequest) (*RoomDeleteResponse, error)
	ListMessageByRoom(context.Context, *ListMessageByRoomRequest) (*GetListMessageByRoomResponse, error)
	SetMessage(context.Context, *SetMessageRequest) (*SetMessageResponse, error)
	SetMessageAi(context.Context, *SetMessageAiRequest) (*SetMessageAiResponse, error)
	GetMessageAi(context.Context, *GetMessageAiRequest) (*GetMessageAiResponse, error)
	mustEmbedUnimplementedMessageServiceServer()
}

// UnimplementedMessageServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMessageServiceServer struct{}

func (UnimplementedMessageServiceServer) RoomList(context.Context, *RoomListRequest) (*RoomListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomList not implemented")
}
func (UnimplementedMessageServiceServer) RoomCreatePerson(context.Context, *RoomCreatePersonRequest) (*RoomCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomCreatePerson not implemented")
}
func (UnimplementedMessageServiceServer) RoomCreateGroup(context.Context, *RoomCreateGroupRequest) (*RoomCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomCreateGroup not implemented")
}
func (UnimplementedMessageServiceServer) RoomDelete(context.Context, *RoomDeleteRequest) (*RoomDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomDelete not implemented")
}
func (UnimplementedMessageServiceServer) ListMessageByRoom(context.Context, *ListMessageByRoomRequest) (*GetListMessageByRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMessageByRoom not implemented")
}
func (UnimplementedMessageServiceServer) SetMessage(context.Context, *SetMessageRequest) (*SetMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMessage not implemented")
}
func (UnimplementedMessageServiceServer) SetMessageAi(context.Context, *SetMessageAiRequest) (*SetMessageAiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMessageAi not implemented")
}
func (UnimplementedMessageServiceServer) GetMessageAi(context.Context, *GetMessageAiRequest) (*GetMessageAiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageAi not implemented")
}
func (UnimplementedMessageServiceServer) mustEmbedUnimplementedMessageServiceServer() {}
func (UnimplementedMessageServiceServer) testEmbeddedByValue()                        {}

// UnsafeMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageServiceServer will
// result in compilation errors.
type UnsafeMessageServiceServer interface {
	mustEmbedUnimplementedMessageServiceServer()
}

func RegisterMessageServiceServer(s grpc.ServiceRegistrar, srv MessageServiceServer) {
	// If the following call pancis, it indicates UnimplementedMessageServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MessageService_ServiceDesc, srv)
}

func _MessageService_RoomList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).RoomList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_RoomList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).RoomList(ctx, req.(*RoomListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_RoomCreatePerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomCreatePersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).RoomCreatePerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_RoomCreatePerson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).RoomCreatePerson(ctx, req.(*RoomCreatePersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_RoomCreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomCreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).RoomCreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_RoomCreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).RoomCreateGroup(ctx, req.(*RoomCreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_RoomDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).RoomDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_RoomDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).RoomDelete(ctx, req.(*RoomDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_ListMessageByRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMessageByRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).ListMessageByRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_ListMessageByRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).ListMessageByRoom(ctx, req.(*ListMessageByRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_SetMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).SetMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_SetMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).SetMessage(ctx, req.(*SetMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_SetMessageAi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMessageAiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).SetMessageAi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_SetMessageAi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).SetMessageAi(ctx, req.(*SetMessageAiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_GetMessageAi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessageAiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetMessageAi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_GetMessageAi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetMessageAi(ctx, req.(*GetMessageAiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageService_ServiceDesc is the grpc.ServiceDesc for MessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RoomList",
			Handler:    _MessageService_RoomList_Handler,
		},
		{
			MethodName: "RoomCreatePerson",
			Handler:    _MessageService_RoomCreatePerson_Handler,
		},
		{
			MethodName: "RoomCreateGroup",
			Handler:    _MessageService_RoomCreateGroup_Handler,
		},
		{
			MethodName: "RoomDelete",
			Handler:    _MessageService_RoomDelete_Handler,
		},
		{
			MethodName: "ListMessageByRoom",
			Handler:    _MessageService_ListMessageByRoom_Handler,
		},
		{
			MethodName: "SetMessage",
			Handler:    _MessageService_SetMessage_Handler,
		},
		{
			MethodName: "SetMessageAi",
			Handler:    _MessageService_SetMessageAi_Handler,
		},
		{
			MethodName: "GetMessageAi",
			Handler:    _MessageService_GetMessageAi_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}
